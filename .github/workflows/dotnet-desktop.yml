# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Compat.Runtime.Serialization.sln                         
      Test_Project_Path: Compat.Runtime.Serialization.Tests\Compat.Runtime.Serialization.Tests.csproj
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 100
    - name: Setup .NET 6.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - name: Setup .NET 8.x
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 8.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
